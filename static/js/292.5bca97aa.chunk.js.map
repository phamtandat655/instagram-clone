{"version":3,"file":"static/js/292.5bca97aa.chunk.js","mappings":"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","sources":["components/Message/Message.js","webpack://instagram-clone/./src/components/Message/Message.module.scss?ab33","pages/Inbox/Inbox.js","webpack://instagram-clone/./src/pages/Inbox/Inbox.module.scss?0675"],"sourcesContent":["import classNames from 'classnames/bind';\r\nimport styles from './Message.module.scss';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nfunction Message({ message, isMyMessage, name, img, time }) {\r\n    return (\r\n        <div className={cx('wrapper')}>\r\n            <div className={cx('container', { myMessage: isMyMessage })}>\r\n                <div className={cx('image-wrapper')}>\r\n                    <img alt=\"messageImage\" src={img} />\r\n                </div>\r\n                <div>\r\n                    <div className={cx('message-wrapper')}>\r\n                        <p>{message}</p>\r\n                    </div>\r\n                    <p className={cx('message-time')}>{time}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Message_wrapper__jF7LO\",\"container\":\"Message_container__WrUiq\",\"myMessage\":\"Message_myMessage__wYnER\",\"image-wrapper\":\"Message_image-wrapper__FPrO5\",\"message-time\":\"Message_message-time__U9E+g\",\"message-wrapper\":\"Message_message-wrapper__aDsVO\"};","import classNames from 'classnames/bind';\r\nimport styles from './Inbox.module.scss';\r\nimport Account from '../../components/Account/Account';\r\nimport Message from '../../components/Message/Message';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { UseFireBase } from '../../Context/FireBaseContext';\r\nimport { UserAuth } from '../../Context/AuthContext';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { updateDoc, doc, Timestamp, setDoc } from 'firebase/firestore';\r\nimport { db } from '../../firebase';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nfunction Inbox() {\r\n    const { inboxes, getUserByEmail, userEmailList } = UseFireBase();\r\n    const { user } = UserAuth();\r\n    const { pathname } = useLocation();\r\n    const scroll = useRef(null);\r\n    const [userInboxes, setUserInboxes] = useState([]);\r\n    const [chatings, setChatings] = useState([]);\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [idInboxList, setIdInboxList] = useState([]);\r\n    const nav = useNavigate();\r\n    // de responsive\r\n    const [isHoverUserInUserInboxes, setIsHoverUserInUserInboxes] = useState(false);\r\n\r\n    let emailInPathName = pathname.slice(7);\r\n\r\n    useEffect(() => {\r\n        setIsHoverUserInUserInboxes(emailInPathName ? true : false);\r\n\r\n        if (emailInPathName && userEmailList.length !== 0 && !userEmailList.includes(emailInPathName)) {\r\n            nav(`/NotFound/inbox/${emailInPathName}`);\r\n        }\r\n\r\n        let newUserInboxes = [];\r\n        let newIdInboxList = [];\r\n\r\n        inboxes.forEach((inbox) => {\r\n            newIdInboxList.push(inbox?.id);\r\n\r\n            const idArr = [...inbox?.id.split('??')];\r\n            if (idArr.includes(user?.email)) {\r\n                newUserInboxes.push(inbox);\r\n\r\n                if (emailInPathName && idArr.includes(emailInPathName)) {\r\n                    setChatings(\r\n                        inbox?.inboxesList\r\n                            .sort(function (x, y) {\r\n                                return x.timestampSecond - y.timestampSecond;\r\n                            })\r\n                            .reverse(),\r\n                    );\r\n                }\r\n            }\r\n        });\r\n        setUserInboxes(newUserInboxes);\r\n        setIdInboxList(newIdInboxList);\r\n    }, [inboxes, user, emailInPathName, nav, userEmailList]);\r\n\r\n    const handleSubmitMessage = async (e) => {\r\n        if (inputValue.trim().length <= 0) {\r\n            return;\r\n        }\r\n\r\n        scroll.current.scrollIntoView({ behavior: 'smooth' });\r\n\r\n        let id = emailInPathName + '??' + user?.email;\r\n        let idReverse = user?.email + '??' + emailInPathName;\r\n        const sender = getUserByEmail(user?.email);\r\n\r\n        // nếu chưa có cuộc trò chuyện thì tạo\r\n        if (!idInboxList.includes(id) && !idInboxList.includes(idReverse)) {\r\n            await setDoc(doc(db, 'inboxes', `${id}`), {\r\n                inboxesList: [\r\n                    {\r\n                        timestampSecond: Math.floor(Date.now() / 1000),\r\n                        timestamp: Timestamp.now(),\r\n                        username: sender?.information?.name,\r\n                        useremail: sender?.information?.email,\r\n                        useravatar: sender?.information?.avatar,\r\n                        chat: inputValue,\r\n                    },\r\n                ],\r\n            });\r\n            setInputValue('');\r\n        }\r\n\r\n        // nếu có rồi thì thêm vô\r\n        inboxes.forEach(async (inbox) => {\r\n            if (inbox?.id.includes(user?.email) && inbox?.id.includes(emailInPathName)) {\r\n                setInputValue('');\r\n\r\n                // lay thong tin nguoi gui\r\n                const docRef = doc(db, 'inboxes', `${inbox?.id}`);\r\n                await updateDoc(docRef, {\r\n                    inboxesList: [\r\n                        ...chatings,\r\n                        {\r\n                            timestampSecond: Math.floor(Date.now() / 1000),\r\n                            timestamp: Timestamp.now(),\r\n                            username: sender?.information?.name,\r\n                            useremail: sender?.information?.email,\r\n                            useravatar: sender?.information?.avatar,\r\n                            chat: inputValue,\r\n                        },\r\n                    ],\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    const getUserByIdInbox = (idInbox) => {\r\n        return idInbox.split('??').find((useremail) => useremail !== user?.email);\r\n    };\r\n\r\n    const handleClickUserInUserList = (useremail) => {\r\n        setInputValue('');\r\n        nav(`/inbox/${useremail}`);\r\n        scroll.current.scrollIntoView({ behavior: 'smooth' });\r\n    };\r\n\r\n    return (\r\n        <div className={cx('wrapper')}>\r\n            <div className={cx('container')}>\r\n                <div className={cx('inboxList', { responsiveInboxList: isHoverUserInUserInboxes })}>\r\n                    <div className={cx('inboxList__account-wrapper')}>\r\n                        <p className={cx('inboxList__title')}>Tin nhắn</p>\r\n                        {userInboxes.length <= 0 && (\r\n                            <div className={cx('inboxList__title-wrong')}>Hiện không có tin nhắn nào !</div>\r\n                        )}\r\n                        {userInboxes &&\r\n                            userInboxes.map((userInbox, index) => {\r\n                                const userEmail = getUserByIdInbox(userInbox?.id);\r\n                                const user = getUserByEmail(userEmail);\r\n                                const lastestMessage = userInbox?.inboxesList\r\n                                    .sort(function (x, y) {\r\n                                        return x.timestampSecond - y.timestampSecond;\r\n                                    })\r\n                                    .reverse();\r\n\r\n                                return (\r\n                                    <div\r\n                                        className={cx('inboxList__account', {\r\n                                            activeAccount: pathname && emailInPathName === userEmail,\r\n                                        })}\r\n                                        onClick={(e) => handleClickUserInUserList(userEmail)}\r\n                                        key={index}\r\n                                    >\r\n                                        <Account\r\n                                            note={lastestMessage[0]?.chat}\r\n                                            // time=\" - 3h\"\r\n                                            lengthDesc={30}\r\n                                            name={user?.information?.name}\r\n                                            img={user?.information?.avatar}\r\n                                        />\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                    </div>\r\n                </div>\r\n                <div className={cx('inboxChats', { responsiveInboxChats: isHoverUserInUserInboxes })}>\r\n                    <div className={cx('inboxChats-top')}>\r\n                        <div\r\n                            className={cx('icon-back')}\r\n                            onClick={(e) => {\r\n                                setIsHoverUserInUserInboxes(false);\r\n                                nav('/inbox');\r\n                            }}\r\n                        >\r\n                            {'<'}\r\n                        </div>\r\n                        {emailInPathName && (\r\n                            <div\r\n                                onClick={(e) =>\r\n                                    nav(`/personalPage/${getUserByEmail(emailInPathName)?.information?.email}`)\r\n                                }\r\n                            >\r\n                                <Account\r\n                                    name={getUserByEmail(emailInPathName)?.information?.name || ''}\r\n                                    img={getUserByEmail(emailInPathName)?.information?.avatar || ''}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <div className={cx('inboxChats-mid')}>\r\n                        <div ref={scroll}></div>\r\n\r\n                        {emailInPathName &&\r\n                            chatings.map((chat, index) => {\r\n                                const time = new Date(chat?.timestampSecond * 1000);\r\n\r\n                                return (\r\n                                    <Message\r\n                                        key={index}\r\n                                        message={chat?.chat}\r\n                                        isMyMessage={chat?.useremail === user?.email}\r\n                                        name={chat?.username}\r\n                                        img={chat?.useravatar}\r\n                                        time={time.toLocaleString()}\r\n                                    />\r\n                                );\r\n                            })}\r\n                    </div>\r\n                    <div className={cx('inboxChats-bottom')}>\r\n                        {emailInPathName && (\r\n                            <form\r\n                                className={cx('chatInput-wrapper')}\r\n                                onSubmit={(e) => {\r\n                                    e.preventDefault();\r\n                                    handleSubmitMessage();\r\n                                }}\r\n                            >\r\n                                <input\r\n                                    value={inputValue}\r\n                                    onChange={(e) => {\r\n                                        setInputValue(e.target.value);\r\n                                    }}\r\n                                    type=\"text\"\r\n                                    placeholder=\"Nhập tin nhắn...\"\r\n                                />\r\n                                <button>Gửi</button>\r\n                            </form>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Inbox;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Inbox_wrapper__Y05jn\",\"container\":\"Inbox_container__0wCTD\",\"inboxList\":\"Inbox_inboxList__-pA8l\",\"inboxList__account-wrapper\":\"Inbox_inboxList__account-wrapper__VhUmF\",\"inboxList__title\":\"Inbox_inboxList__title__7-Bsq\",\"inboxList__title-wrong\":\"Inbox_inboxList__title-wrong__DPWuS\",\"inboxList__account\":\"Inbox_inboxList__account__aoZiz\",\"activeAccount\":\"Inbox_activeAccount__UeORF\",\"inboxChats\":\"Inbox_inboxChats__Nxl+G\",\"inboxChats-top\":\"Inbox_inboxChats-top__hslf4\",\"icon-back\":\"Inbox_icon-back__Hl4Lt\",\"inboxChats-mid\":\"Inbox_inboxChats-mid__oc89z\",\"inboxChats-bottom\":\"Inbox_inboxChats-bottom__4fOCp\",\"chatInput-wrapper\":\"Inbox_chatInput-wrapper__iexNy\",\"responsiveInboxList\":\"Inbox_responsiveInboxList__daHoX\",\"responsiveInboxChats\":\"Inbox_responsiveInboxChats__2Aj4J\"};"],"names":["cx","classNames","message","isMyMessage","img","name","time","className","myMessage","alt","src","UseFireBase","inboxes","getUserByEmail","userEmailList","user","UserAuth","pathname","useLocation","scroll","useRef","useState","userInboxes","setUserInboxes","chatings","setChatings","inputValue","setInputValue","idInboxList","setIdInboxList","nav","useNavigate","isHoverUserInUserInboxes","setIsHoverUserInUserInboxes","emailInPathName","slice","useEffect","length","includes","newUserInboxes","newIdInboxList","forEach","inbox","push","id","idArr","split","email","inboxesList","sort","x","y","timestampSecond","reverse","handleSubmitMessage","e","trim","current","scrollIntoView","behavior","idReverse","sender","setDoc","doc","db","Math","floor","Date","now","timestamp","Timestamp","username","information","useremail","useravatar","avatar","chat","docRef","updateDoc","getUserByIdInbox","idInbox","find","responsiveInboxList","map","userInbox","index","userEmail","lastestMessage","activeAccount","onClick","Account","note","lengthDesc","responsiveInboxChats","ref","toLocaleString","onSubmit","preventDefault","value","onChange","target","type","placeholder"],"sourceRoot":""}